# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Test, Build and Upload to App distribution
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Setup Java JDK
        uses: actions/setup-java@v4.7.0
        with:
          # The Java version to set up. Takes a whole or semver Java version. See examples of supported syntax in README file
          java-version: 17
          # Java distribution. See the list of supported distributions in README file
          distribution: "jetbrains"
          # Set this option if you want the action to check for the latest available version that satisfies the version spec
          check-latest: true
          # Name of the build platform to cache dependencies. It can be "maven", "gradle" or "sbt".
          cache: "gradle"
          # The path to a dependency file: pom.xml, build.gradle, build.sbt, etc. This option can be used with the `cache` option. If this option is omitted, the action searches for the dependency file in the entire repository. This option supports wildcards and a list of file names for caching multiple dependencies.
          cache-dependency-path: "gradle/*.versions.toml"

      - name: Change Gradle Wrapper permissions
        run: chmod +x ./gradlew

      - name: Run tests
        run: ./gradlew testDebugUnitTest

      - name: Build Project
        run: ./gradlew :app:assembleDevDebug

      - name: upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.FIREBASE_APP_ID}}
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          groups: Internal Tester
          file: app/build/outputs/apk/dev/debug/app-dev-debug.apk
          debug: true


